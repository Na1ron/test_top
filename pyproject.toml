[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fpga-pipeline-generator"
version = "1.0.0"
authors = [
    {name = "FPGA Pipeline Generator Team", email = "dev@example.com"},
]
description = "Генератор динамических CI/CD пайплайнов для FPGA проектов"
readme = "FPGA_PIPELINE_README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Build Tools",
    "Topic :: System :: Hardware",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["fpga", "ci-cd", "pipeline", "yaml", "automation", "hardware"]
dependencies = [
    "PyYAML>=6.0",
    "Jinja2>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=22.0",
    "isort>=5.0",
    "flake8>=5.0",
    "mypy>=1.0",
]
docs = [
    "mkdocs>=1.4",
    "mkdocs-material>=8.0",
]

<<<<<<< HEAD
[project.urls]
Homepage = "https://github.com/your-org/fpga-pipeline-generator"
Documentation = "https://github.com/your-org/fpga-pipeline-generator#readme"
Repository = "https://github.com/your-org/fpga-pipeline-generator.git"
"Bug Reports" = "https://github.com/your-org/fpga-pipeline-generator/issues"

=======
>>>>>>> YSDTSRE-710
[project.scripts]
fpga-pipeline-gen = "fpga_pipeline_generator.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["fpga_pipeline_generator*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
fpga_pipeline_generator = [
    "templates/*.j2",
    "config/*.yaml",
    "config/*.yml",
]

# Настройки для инструментов разработки

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "yaml.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "jinja2.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["fpga_pipeline_generator"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]